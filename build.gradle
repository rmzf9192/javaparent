//声明gradle脚本自身需要使用的资源,优先执行
buildscript {
    ext {
        springBootVersion = '2.1.3.RELEASE'
    }
    repositories {
        // 本地maven仓库
        mavenLocal()
        maven { url = 'http://maven.aliyun.com/nexus/content/groups/public/' }
        //和maven中央仓库一样的另一个依赖管理仓库,主要是java
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

//  allprojects  所有项目共享的配置
allprojects {
    apply plugin: 'idea'
    apply plugin: 'java-library'
    version = '1.0'
    sourceCompatibility = 8
    targetCompatibility = 8
}

// subprojects : 所有子模块共享的配置
subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'  //使用springboot插件
    apply plugin: 'io.spring.dependency-management'  //版本管理插件
    // java编译的时候缺省状态下会因为中文字符而失败
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'
    // 配置所有子模块的依赖仓库地址
    repositories {
        // 本地maven仓库
        mavenLocal()
        maven { url = 'http://maven.aliyun.com/nexus/content/groups/public/' }
        //和maven中央仓库一样的另一个依赖管理仓库,主要是java
        jcenter()
    }
    //所有子模块共有依赖
    dependencies{
        implementation 'org.codehaus.groovy:groovy'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testCompile 'junit:junit:4.12'
        compileOnly 'org.projectlombok:lombok:1.18.10'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-configuration-processor'
    }
}